import base64
from groq import Groq
import os
from dotenv import load_dotenv
# Initialize Groq client

load_dotenv()
client = Groq(
    api_key=os.environ.get("GROQ_API_KEY"),
)
# Utility function to encode image to base64
def encode_image(image_path):
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode("utf-8")

# -------------------------------
# STAGE 1: Reference Diagram to Text Description
# -------------------------------


client = Groq()



def generate_reference_description(reference_image_path):
    base64_image = encode_image(reference_image_path)
    
    completion = client.chat.completions.create(
    model="meta-llama/llama-4-scout-17b-16e-instruct",
    messages=[
        {
            "role": "user",
            "content": [
                {"type": "text", "text": "Describe this diagram in detail. Mention all key components, labels, and structure."},
                {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{base64_image}"}}
            ]
        }
    ],
    temperature=1,
    max_completion_tokens=1024,
    top_p=1,
    stream=False,
    stop=None,
    )
    ref_description = completion.choices[0].message.content
    print(ref_description)
    return ref_description

# -------------------------------
# STAGE 2: Student Diagram Evaluation
# -------------------------------

def evaluate_student_diagram(student_image_path, reference_description):
    base64_image = encode_image(student_image_path)
    
    prompt = f"""
    Reference Description:
    {reference_description}

    You are an expert AI diagram evaluator. Your task is to **strictly evaluate** the studentâ€™s diagram against the reference description above.

    ðŸŽ¯ Focus only on:
    - The **presence**, **structure**, and **correctness** of the core components mentioned in the reference
    - Logical layout and accurate connections between key elements (arrows, flows, blocks, interactions, etc.)
    - Correct and complete labeling of diagram parts

    ðŸš« Do NOT consider:
    - Visual quality such as handwriting, drawing style, or color usage
    - Neatness or aesthetics unless it directly causes misunderstanding
    - Decorative or presentational differences

    ðŸ“‰ Scoring Instructions:
    Be **conservative** in your grading. Deduct points for any missing, extra, misaligned, or mislabeled elements.
    Only give a perfect score when the studentâ€™s diagram **fully matches** the description with **no omissions or structural errors**.

    ðŸ”¢ Rounding:
    All scores must be **rounded up to the nearest whole number** (e.g., 3.1 â†’ 4). Do not give decimals.

    ðŸ“Š Output Format (Important for automated parsing):
    Return your response in the following format exactly:

    Correctness: <1-5>
    Completeness: <1-5>
    Labeling: <1-5>
    Final Score: <1-5>

    Summary:
    <One paragraph summary explaining your evaluation>
    """




    response = client.chat.completions.create(
    model="meta-llama/llama-4-scout-17b-16e-instruct",
    messages=[
        {
            "role": "user",
                "content": [
                    {"type": "text", "text": prompt},
                    {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{base64_image}"}}
                ]
        }
    ],
    temperature=1,
    max_completion_tokens=1024,
    top_p=1,
    stream=False,
    stop=None,
    )
    
    return response.choices[0].message.content

# -------------------------------
# ðŸš€ Example Usage
# -------------------------------

# Step 1: Generate reference description from teacher's diagram
reference_description = generate_reference_description("student_diagram_2.png")
print("Generated Reference Description:\n", reference_description)

# Step 2: Evaluate student diagram
evaluation_result = evaluate_student_diagram("incomplete_diagram.jpeg", reference_description)
print("\nStudent Diagram Evaluation:\n", evaluation_result)
